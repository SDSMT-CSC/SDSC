bool input;
result = input | (((input & 1) ^ (open & 1)) << 3);
switch(result)
{
  case 0:
  case 8:  // Nak and door is open
    return nak("Nak received.");
  case 1:
  case 9:  // ACK and door is open
    return ack();
  case 2: 
    return nak("Door is already open.");
  case 3: 
    return nak("Door is already closed.");
  case 4:  // Query - 4
    return ack("Door is closing.");
  case 5:  // Query' - 5
    return nak("Door is opening.");
  case 6:  // Query and open failed
    return ack("Opening door");
  case 7:  // Query and close failed
    return ack("Closing door");
  case 10: // Open sent and processed correctly.
    return ack("Opening Door");
  case 14: // 8 + 4 + 2: Door query and open successful
    register("Door-listener");
    return ack("Opening Door");
  case 11: // Close sent and processed correctly.
  case 15: // 8 + 4 + 2 + 1: Door query and close successful
    register("Door-listener");
    return ack("Closing Door");
  case 12: // Query' - 5
    return nak("Door is already closed.");
  case 13: // Query - 4
    return ack("Door is opening.");
}

state \ 10 11
       *-----
    0  | 1  0 
    1  | 0  1 

0 is open
1 is closed

8 Mismatch
4 Query
2 Action
1 Desired State

0: NAK
1: ACK
2: Force Open
3: Force Close
4: Query Door
5: (Not used) Query complement
6: Query/Open
7: Query/Close

0: NAK
1: ACK
2: Open Unsuccessful
3: Close Unsuccessful
4: Respond that door is open
5: Respond that door is closed
6: Respond that door is already open
7: Respond that door is already closed
8: NAK
9: ACK
10:
